/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Askaiden);
  }
}(this, function(expect, Askaiden) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PrismaModelsUser', function() {
      beforeEach(function() {
        instance = new Askaiden.PrismaModelsUser();
      });

      it('should create an instance of PrismaModelsUser', function() {
        // TODO: update the code to test PrismaModelsUser
        expect(instance).to.be.a(Askaiden.PrismaModelsUser);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property avatar (base name: "avatar")', function() {
        // TODO: update the code to test the property avatar
        expect(instance).to.have.property('avatar');
        // expect(instance.avatar).to.be(expectedValueLiteral);
      });

      it('should have the property age (base name: "age")', function() {
        // TODO: update the code to test the property age
        expect(instance).to.have.property('age');
        // expect(instance.age).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property skills (base name: "skills")', function() {
        // TODO: update the code to test the property skills
        expect(instance).to.have.property('skills');
        // expect(instance.skills).to.be(expectedValueLiteral);
      });

      it('should have the property datasources (base name: "datasources")', function() {
        // TODO: update the code to test the property datasources
        expect(instance).to.have.property('datasources');
        // expect(instance.datasources).to.be(expectedValueLiteral);
      });

      it('should have the property tools (base name: "tools")', function() {
        // TODO: update the code to test the property tools
        expect(instance).to.have.property('tools');
        // expect(instance.tools).to.be(expectedValueLiteral);
      });

      it('should have the property aiden (base name: "aiden")', function() {
        // TODO: update the code to test the property aiden
        expect(instance).to.have.property('aiden');
        // expect(instance.aiden).to.be(expectedValueLiteral);
      });

      it('should have the property memories (base name: "memories")', function() {
        // TODO: update the code to test the property memories
        expect(instance).to.have.property('memories');
        // expect(instance.memories).to.be(expectedValueLiteral);
      });

      it('should have the property conversations (base name: "conversations")', function() {
        // TODO: update the code to test the property conversations
        expect(instance).to.have.property('conversations');
        // expect(instance.conversations).to.be(expectedValueLiteral);
      });

    });
  });

}));
