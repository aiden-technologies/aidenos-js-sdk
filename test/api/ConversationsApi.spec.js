/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Askaiden);
  }
}(this, function(expect, Askaiden) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Askaiden.ConversationsApi();
  });

  describe('(package)', function() {
    describe('ConversationsApi', function() {
      describe('createApiV1ConversationsPost', function() {
        it('should call createApiV1ConversationsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createApiV1ConversationsPost call and complete the assertions
          /*
          var opts = {};

          instance.createApiV1ConversationsPost(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteApiV1ConversationsConversationIdDelete', function() {
        it('should call deleteApiV1ConversationsConversationIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteApiV1ConversationsConversationIdDelete call and complete the assertions
          /*

          instance.deleteApiV1ConversationsConversationIdDelete(conversationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listApiV1ConversationsConversationIdMessagesGet', function() {
        it('should call listApiV1ConversationsConversationIdMessagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listApiV1ConversationsConversationIdMessagesGet call and complete the assertions
          /*

          instance.listApiV1ConversationsConversationIdMessagesGet(conversationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listApiV1ConversationsGet', function() {
        it('should call listApiV1ConversationsGet successfully', function(done) {
          // TODO: uncomment listApiV1ConversationsGet call and complete the assertions
          /*

          instance.listApiV1ConversationsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateApiV1ConversationsConversationIdPatch', function() {
        it('should call updateApiV1ConversationsConversationIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateApiV1ConversationsConversationIdPatch call and complete the assertions
          /*

          instance.updateApiV1ConversationsConversationIdPatch(body, conversationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
