/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Askaiden);
  }
}(this, function(expect, Askaiden) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Askaiden.SkillsApi();
  });

  describe('(package)', function() {
    describe('SkillsApi', function() {
      describe('addDatasourceApiV1SkillsSkillIdDatasourcesPost', function() {
        it('should call addDatasourceApiV1SkillsSkillIdDatasourcesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for addDatasourceApiV1SkillsSkillIdDatasourcesPost call and complete the assertions
          /*

          instance.addDatasourceApiV1SkillsSkillIdDatasourcesPost(body, skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkill);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addToolApiV1SkillsSkillIdToolsPost', function() {
        it('should call addToolApiV1SkillsSkillIdToolsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for addToolApiV1SkillsSkillIdToolsPost call and complete the assertions
          /*

          instance.addToolApiV1SkillsSkillIdToolsPost(body, skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkill);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createApiV1SkillsPost', function() {
        it('should call createApiV1SkillsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createApiV1SkillsPost call and complete the assertions
          /*

          instance.createApiV1SkillsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkill);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteApiV1SkillsSkillIdDelete', function() {
        it('should call deleteApiV1SkillsSkillIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteApiV1SkillsSkillIdDelete call and complete the assertions
          /*

          instance.deleteApiV1SkillsSkillIdDelete(skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getApiV1SkillsSkillIdGet', function() {
        it('should call getApiV1SkillsSkillIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getApiV1SkillsSkillIdGet call and complete the assertions
          /*

          instance.getApiV1SkillsSkillIdGet(skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkill);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invokeApiV1SkillsSkillIdInvokePost', function() {
        it('should call invokeApiV1SkillsSkillIdInvokePost successfully', function(done) {
          // TODO: uncomment, update parameter values for invokeApiV1SkillsSkillIdInvokePost call and complete the assertions
          /*

          instance.invokeApiV1SkillsSkillIdInvokePost(body, skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkillInvoke);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listApiV1SkillsGet', function() {
        it('should call listApiV1SkillsGet successfully', function(done) {
          // TODO: uncomment listApiV1SkillsGet call and complete the assertions
          /*

          instance.listApiV1SkillsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.SkillList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listDatasourcesApiV1SkillsSkillIdDatasourcesGet', function() {
        it('should call listDatasourcesApiV1SkillsSkillIdDatasourcesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listDatasourcesApiV1SkillsSkillIdDatasourcesGet call and complete the assertions
          /*

          instance.listDatasourcesApiV1SkillsSkillIdDatasourcesGet(skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.SkillDatasosurceList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRunsApiV1SkillsSkillIdRunsGet', function() {
        it('should call listRunsApiV1SkillsSkillIdRunsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listRunsApiV1SkillsSkillIdRunsGet call and complete the assertions
          /*

          instance.listRunsApiV1SkillsSkillIdRunsGet(skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.SkillRunList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listToolsApiV1SkillsSkillIdToolsGet', function() {
        it('should call listToolsApiV1SkillsSkillIdToolsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for listToolsApiV1SkillsSkillIdToolsGet call and complete the assertions
          /*

          instance.listToolsApiV1SkillsSkillIdToolsGet(skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.SkillToolList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete', function() {
        it('should call removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete call and complete the assertions
          /*

          instance.removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete(skillId, datasourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeToolApiV1SkillsSkillIdToolsToolIdDelete', function() {
        it('should call removeToolApiV1SkillsSkillIdToolsToolIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for removeToolApiV1SkillsSkillIdToolsToolIdDelete call and complete the assertions
          /*

          instance.removeToolApiV1SkillsSkillIdToolsToolIdDelete(skillId, toolId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateApiV1SkillsSkillIdPatch', function() {
        it('should call updateApiV1SkillsSkillIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateApiV1SkillsSkillIdPatch call and complete the assertions
          /*

          instance.updateApiV1SkillsSkillIdPatch(body, skillId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Askaiden.AppModelsResponseSkill);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
