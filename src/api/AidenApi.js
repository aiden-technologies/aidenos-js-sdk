/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AidenInvoke} from '../model/AidenInvoke';
import {AidenList} from '../model/AidenList';
import {AppModelsRequestAiden} from '../model/AppModelsRequestAiden';
import {AppModelsRequestAidenStep} from '../model/AppModelsRequestAidenStep';
import {AppModelsResponseAiden} from '../model/AppModelsResponseAiden';
import {HTTPValidationError} from '../model/HTTPValidationError';

/**
* Aiden service.
* @module api/AidenApi
* @version 0.0.5
*/
export class AidenApi {

    /**
    * Constructs a new AidenApi. 
    * @alias module:api/AidenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addStepApiV1AidenAidenIdStepsPost operation.
     * @callback moduleapi/AidenApi~addStepApiV1AidenAidenIdStepsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseAiden{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Step
     * Create a new aiden step
     * @param {module:model/AppModelsRequestAidenStep} body 
     * @param {String} aidenId 
     * @param {module:api/AidenApi~addStepApiV1AidenAidenIdStepsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addStepApiV1AidenAidenIdStepsPost(body, aidenId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStepApiV1AidenAidenIdStepsPost");
      }
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling addStepApiV1AidenAidenIdStepsPost");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseAiden;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}/steps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createApiV1AidenPost operation.
     * @callback moduleapi/AidenApi~createApiV1AidenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseAiden{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a new aiden
     * @param {module:model/AppModelsRequestAiden} body 
     * @param {module:api/AidenApi~createApiV1AidenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createApiV1AidenPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApiV1AidenPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseAiden;

      return this.apiClient.callApi(
        '/api/v1/aiden', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteApiV1AidenAidenIdDelete operation.
     * @callback moduleapi/AidenApi~deleteApiV1AidenAidenIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete a specific aiden
     * @param {String} aidenId 
     * @param {module:api/AidenApi~deleteApiV1AidenAidenIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteApiV1AidenAidenIdDelete(aidenId, callback) {
      
      let postBody = null;
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling deleteApiV1AidenAidenIdDelete");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteStepApiV1AidenAidenIdStepsStepIdDelete operation.
     * @callback moduleapi/AidenApi~deleteStepApiV1AidenAidenIdStepsStepIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Step
     * Delete a specific aiden step
     * @param {String} aidenId 
     * @param {String} stepId 
     * @param {module:api/AidenApi~deleteStepApiV1AidenAidenIdStepsStepIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteStepApiV1AidenAidenIdStepsStepIdDelete(aidenId, stepId, callback) {
      
      let postBody = null;
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling deleteStepApiV1AidenAidenIdStepsStepIdDelete");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling deleteStepApiV1AidenAidenIdStepsStepIdDelete");
      }

      let pathParams = {
        'aiden_id': aidenId,'step_id': stepId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}/steps/{step_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiV1AidenAidenIdGet operation.
     * @callback moduleapi/AidenApi~getApiV1AidenAidenIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseAiden{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get a single aiden
     * @param {String} aidenId 
     * @param {module:api/AidenApi~getApiV1AidenAidenIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getApiV1AidenAidenIdGet(aidenId, callback) {
      
      let postBody = null;
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling getApiV1AidenAidenIdGet");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseAiden;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the invokeApiV1AidenAidenIdInvokePost operation.
     * @callback moduleapi/AidenApi~invokeApiV1AidenAidenIdInvokePostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke
     * Invoke a specific aiden
     * @param {module:model/AidenInvoke} body 
     * @param {String} aidenId 
     * @param {module:api/AidenApi~invokeApiV1AidenAidenIdInvokePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    invokeApiV1AidenAidenIdInvokePost(body, aidenId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeApiV1AidenAidenIdInvokePost");
      }
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling invokeApiV1AidenAidenIdInvokePost");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}/invoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listApiV1AidenGet operation.
     * @callback moduleapi/AidenApi~listApiV1AidenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AidenList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all aiden
     * @param {module:api/AidenApi~listApiV1AidenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listApiV1AidenGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AidenList;

      return this.apiClient.callApi(
        '/api/v1/aiden', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listStepsApiV1AidenAidenIdStepsGet operation.
     * @callback moduleapi/AidenApi~listStepsApiV1AidenAidenIdStepsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AidenList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Steps
     * List all steps of a aiden
     * @param {String} aidenId 
     * @param {module:api/AidenApi~listStepsApiV1AidenAidenIdStepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listStepsApiV1AidenAidenIdStepsGet(aidenId, callback) {
      
      let postBody = null;
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling listStepsApiV1AidenAidenIdStepsGet");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AidenList;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateApiV1AidenAidenIdPatch operation.
     * @callback moduleapi/AidenApi~updateApiV1AidenAidenIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseAiden{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Patch a aiden
     * @param {module:model/AppModelsRequestAiden} body 
     * @param {String} aidenId 
     * @param {module:api/AidenApi~updateApiV1AidenAidenIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateApiV1AidenAidenIdPatch(body, aidenId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApiV1AidenAidenIdPatch");
      }
      // verify the required parameter 'aidenId' is set
      if (aidenId === undefined || aidenId === null) {
        throw new Error("Missing the required parameter 'aidenId' when calling updateApiV1AidenAidenIdPatch");
      }

      let pathParams = {
        'aiden_id': aidenId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseAiden;

      return this.apiClient.callApi(
        '/api/v1/aiden/{aiden_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}