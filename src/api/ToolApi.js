/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AppModelsRequestTool} from '../model/AppModelsRequestTool';
import {AppModelsResponseTool} from '../model/AppModelsResponseTool';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {ToolList} from '../model/ToolList';

/**
* Tool service.
* @module api/ToolApi
* @version 0.0.5
*/
export class ToolApi {

    /**
    * Constructs a new ToolApi. 
    * @alias module:api/ToolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createApiV1ToolsPost operation.
     * @callback moduleapi/ToolApi~createApiV1ToolsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseTool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a new tool
     * @param {module:model/AppModelsRequestTool} body 
     * @param {module:api/ToolApi~createApiV1ToolsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createApiV1ToolsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApiV1ToolsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseTool;

      return this.apiClient.callApi(
        '/api/v1/tools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteApiV1ToolsToolIdDelete operation.
     * @callback moduleapi/ToolApi~deleteApiV1ToolsToolIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete a specific tool
     * @param {String} toolId 
     * @param {module:api/ToolApi~deleteApiV1ToolsToolIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteApiV1ToolsToolIdDelete(toolId, callback) {
      
      let postBody = null;
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling deleteApiV1ToolsToolIdDelete");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/tools/{tool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiV1ToolsToolIdGet operation.
     * @callback moduleapi/ToolApi~getApiV1ToolsToolIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseTool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get a specific tool
     * @param {String} toolId 
     * @param {module:api/ToolApi~getApiV1ToolsToolIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getApiV1ToolsToolIdGet(toolId, callback) {
      
      let postBody = null;
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling getApiV1ToolsToolIdGet");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseTool;

      return this.apiClient.callApi(
        '/api/v1/tools/{tool_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listApiV1ToolsGet operation.
     * @callback moduleapi/ToolApi~listApiV1ToolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all tools
     * @param {module:api/ToolApi~listApiV1ToolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listApiV1ToolsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ToolList;

      return this.apiClient.callApi(
        '/api/v1/tools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateApiV1ToolsToolIdPatch operation.
     * @callback moduleapi/ToolApi~updateApiV1ToolsToolIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseTool{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Update a specific tool
     * @param {module:model/AppModelsRequestTool} body 
     * @param {String} toolId 
     * @param {module:api/ToolApi~updateApiV1ToolsToolIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateApiV1ToolsToolIdPatch(body, toolId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApiV1ToolsToolIdPatch");
      }
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling updateApiV1ToolsToolIdPatch");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseTool;

      return this.apiClient.callApi(
        '/api/v1/tools/{tool_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}