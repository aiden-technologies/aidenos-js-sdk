/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AppModelsRequestSkill} from '../model/AppModelsRequestSkill';
import {AppModelsRequestSkillDatasource} from '../model/AppModelsRequestSkillDatasource';
import {AppModelsRequestSkillInvoke} from '../model/AppModelsRequestSkillInvoke';
import {AppModelsRequestSkillTool} from '../model/AppModelsRequestSkillTool';
import {AppModelsResponseSkill} from '../model/AppModelsResponseSkill';
import {AppModelsResponseSkillInvoke} from '../model/AppModelsResponseSkillInvoke';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {SkillDatasosurceList} from '../model/SkillDatasosurceList';
import {SkillList} from '../model/SkillList';
import {SkillRunList} from '../model/SkillRunList';
import {SkillToolList} from '../model/SkillToolList';

/**
* Skills service.
* @module api/SkillsApi
* @version 0.0.5
*/
export class SkillsApi {

    /**
    * Constructs a new SkillsApi. 
    * @alias module:api/SkillsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addDatasource operation.
     * @callback moduleapi/SkillsApi~addDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Datasource
     * Add datasource to skill
     * @param {module:model/AppModelsRequestSkillDatasource} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~addDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addDatasource(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDatasource");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling addDatasource");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addSkillTool operation.
     * @callback moduleapi/SkillsApi~addSkillToolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Tool
     * Add tool to skill
     * @param {module:model/AppModelsRequestSkillTool} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~addSkillToolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addSkillTool(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSkillTool");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling addSkillTool");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createSkill operation.
     * @callback moduleapi/SkillsApi~createSkillCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a new skill
     * @param {module:model/AppModelsRequestSkill} body 
     * @param {module:api/SkillsApi~createSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createSkill(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSkill");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSkill operation.
     * @callback moduleapi/SkillsApi~deleteSkillCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete an skill
     * @param {String} skillId 
     * @param {module:api/SkillsApi~deleteSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteSkill(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling deleteSkill");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSkill operation.
     * @callback moduleapi/SkillsApi~getSkillCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get a single skill
     * @param {String} skillId 
     * @param {module:api/SkillsApi~getSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSkill(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling getSkill");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the invokeSkill operation.
     * @callback moduleapi/SkillsApi~invokeSkillCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkillInvoke{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke
     * Invoke an skill
     * @param {module:model/AppModelsRequestSkillInvoke} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~invokeSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    invokeSkill(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeSkill");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling invokeSkill");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkillInvoke;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/invoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listRuns operation.
     * @callback moduleapi/SkillsApi~listRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillRunList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Runs
     * List skill runs
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listRuns(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listRuns");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillRunList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSkillDatasources operation.
     * @callback moduleapi/SkillsApi~listSkillDatasourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillDatasosurceList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Datasources
     * List skill datasources
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listSkillDatasourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSkillDatasources(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listSkillDatasources");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillDatasosurceList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSkillTools operation.
     * @callback moduleapi/SkillsApi~listSkillToolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillToolList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tools
     * List skill tools
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listSkillToolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSkillTools(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listSkillTools");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillToolList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listSkills operation.
     * @callback moduleapi/SkillsApi~listSkillsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all skills
     * @param {module:api/SkillsApi~listSkillsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listSkills(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillList;

      return this.apiClient.callApi(
        '/api/v1/skills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeDatasource operation.
     * @callback moduleapi/SkillsApi~removeDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Datasource
     * Remove datasource from skill
     * @param {String} skillId 
     * @param {String} datasourceId 
     * @param {module:api/SkillsApi~removeDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeDatasource(skillId, datasourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling removeDatasource");
      }
      // verify the required parameter 'datasourceId' is set
      if (datasourceId === undefined || datasourceId === null) {
        throw new Error("Missing the required parameter 'datasourceId' when calling removeDatasource");
      }

      let pathParams = {
        'skill_id': skillId,'datasource_id': datasourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources/{datasource_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeTool operation.
     * @callback moduleapi/SkillsApi~removeToolCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Tool
     * Remove tool from skill
     * @param {String} skillId 
     * @param {String} toolId 
     * @param {module:api/SkillsApi~removeToolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeTool(skillId, toolId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling removeTool");
      }
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling removeTool");
      }

      let pathParams = {
        'skill_id': skillId,'tool_id': toolId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools/{tool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSkill operation.
     * @callback moduleapi/SkillsApi~updateSkillCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Patch an skill
     * @param {module:model/AppModelsRequestSkill} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~updateSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateSkill(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSkill");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling updateSkill");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}