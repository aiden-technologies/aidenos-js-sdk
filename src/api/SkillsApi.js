/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AppModelsRequestSkill} from '../model/AppModelsRequestSkill';
import {AppModelsRequestSkillDatasource} from '../model/AppModelsRequestSkillDatasource';
import {AppModelsRequestSkillInvoke} from '../model/AppModelsRequestSkillInvoke';
import {AppModelsRequestSkillTool} from '../model/AppModelsRequestSkillTool';
import {AppModelsResponseSkill} from '../model/AppModelsResponseSkill';
import {AppModelsResponseSkillInvoke} from '../model/AppModelsResponseSkillInvoke';
import {HTTPValidationError} from '../model/HTTPValidationError';
import {SkillDatasosurceList} from '../model/SkillDatasosurceList';
import {SkillList} from '../model/SkillList';
import {SkillRunList} from '../model/SkillRunList';
import {SkillToolList} from '../model/SkillToolList';

/**
* Skills service.
* @module api/SkillsApi
* @version 0.0.5
*/
export class SkillsApi {

    /**
    * Constructs a new SkillsApi. 
    * @alias module:api/SkillsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addDatasourceApiV1SkillsSkillIdDatasourcesPost operation.
     * @callback moduleapi/SkillsApi~addDatasourceApiV1SkillsSkillIdDatasourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Datasource
     * Add datasource to skill
     * @param {module:model/AppModelsRequestSkillDatasource} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~addDatasourceApiV1SkillsSkillIdDatasourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addDatasourceApiV1SkillsSkillIdDatasourcesPost(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addDatasourceApiV1SkillsSkillIdDatasourcesPost");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling addDatasourceApiV1SkillsSkillIdDatasourcesPost");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addToolApiV1SkillsSkillIdToolsPost operation.
     * @callback moduleapi/SkillsApi~addToolApiV1SkillsSkillIdToolsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Tool
     * Add tool to skill
     * @param {module:model/AppModelsRequestSkillTool} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~addToolApiV1SkillsSkillIdToolsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addToolApiV1SkillsSkillIdToolsPost(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addToolApiV1SkillsSkillIdToolsPost");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling addToolApiV1SkillsSkillIdToolsPost");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createApiV1SkillsPost operation.
     * @callback moduleapi/SkillsApi~createApiV1SkillsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a new skill
     * @param {module:model/AppModelsRequestSkill} body 
     * @param {module:api/SkillsApi~createApiV1SkillsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createApiV1SkillsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApiV1SkillsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteApiV1SkillsSkillIdDelete operation.
     * @callback moduleapi/SkillsApi~deleteApiV1SkillsSkillIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete an skill
     * @param {String} skillId 
     * @param {module:api/SkillsApi~deleteApiV1SkillsSkillIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteApiV1SkillsSkillIdDelete(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling deleteApiV1SkillsSkillIdDelete");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiV1SkillsSkillIdGet operation.
     * @callback moduleapi/SkillsApi~getApiV1SkillsSkillIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get a single skill
     * @param {String} skillId 
     * @param {module:api/SkillsApi~getApiV1SkillsSkillIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getApiV1SkillsSkillIdGet(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling getApiV1SkillsSkillIdGet");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the invokeApiV1SkillsSkillIdInvokePost operation.
     * @callback moduleapi/SkillsApi~invokeApiV1SkillsSkillIdInvokePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkillInvoke{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke
     * Invoke an skill
     * @param {module:model/AppModelsRequestSkillInvoke} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~invokeApiV1SkillsSkillIdInvokePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    invokeApiV1SkillsSkillIdInvokePost(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeApiV1SkillsSkillIdInvokePost");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling invokeApiV1SkillsSkillIdInvokePost");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkillInvoke;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/invoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listApiV1SkillsGet operation.
     * @callback moduleapi/SkillsApi~listApiV1SkillsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all skills
     * @param {module:api/SkillsApi~listApiV1SkillsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listApiV1SkillsGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillList;

      return this.apiClient.callApi(
        '/api/v1/skills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listDatasourcesApiV1SkillsSkillIdDatasourcesGet operation.
     * @callback moduleapi/SkillsApi~listDatasourcesApiV1SkillsSkillIdDatasourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillDatasosurceList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Datasources
     * List skill datasources
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listDatasourcesApiV1SkillsSkillIdDatasourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listDatasourcesApiV1SkillsSkillIdDatasourcesGet(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listDatasourcesApiV1SkillsSkillIdDatasourcesGet");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillDatasosurceList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listRunsApiV1SkillsSkillIdRunsGet operation.
     * @callback moduleapi/SkillsApi~listRunsApiV1SkillsSkillIdRunsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillRunList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Runs
     * List skill runs
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listRunsApiV1SkillsSkillIdRunsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listRunsApiV1SkillsSkillIdRunsGet(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listRunsApiV1SkillsSkillIdRunsGet");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillRunList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listToolsApiV1SkillsSkillIdToolsGet operation.
     * @callback moduleapi/SkillsApi~listToolsApiV1SkillsSkillIdToolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillToolList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tools
     * List skill tools
     * @param {String} skillId 
     * @param {module:api/SkillsApi~listToolsApiV1SkillsSkillIdToolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listToolsApiV1SkillsSkillIdToolsGet(skillId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling listToolsApiV1SkillsSkillIdToolsGet");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillToolList;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete operation.
     * @callback moduleapi/SkillsApi~removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Datasource
     * Remove datasource from skill
     * @param {String} skillId 
     * @param {String} datasourceId 
     * @param {module:api/SkillsApi~removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete(skillId, datasourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete");
      }
      // verify the required parameter 'datasourceId' is set
      if (datasourceId === undefined || datasourceId === null) {
        throw new Error("Missing the required parameter 'datasourceId' when calling removeDatasourceApiV1SkillsSkillIdDatasourcesDatasourceIdDelete");
      }

      let pathParams = {
        'skill_id': skillId,'datasource_id': datasourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/datasources/{datasource_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeToolApiV1SkillsSkillIdToolsToolIdDelete operation.
     * @callback moduleapi/SkillsApi~removeToolApiV1SkillsSkillIdToolsToolIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Tool
     * Remove tool from skill
     * @param {String} skillId 
     * @param {String} toolId 
     * @param {module:api/SkillsApi~removeToolApiV1SkillsSkillIdToolsToolIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeToolApiV1SkillsSkillIdToolsToolIdDelete(skillId, toolId, callback) {
      
      let postBody = null;
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling removeToolApiV1SkillsSkillIdToolsToolIdDelete");
      }
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling removeToolApiV1SkillsSkillIdToolsToolIdDelete");
      }

      let pathParams = {
        'skill_id': skillId,'tool_id': toolId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}/tools/{tool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateApiV1SkillsSkillIdPatch operation.
     * @callback moduleapi/SkillsApi~updateApiV1SkillsSkillIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseSkill{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Patch an skill
     * @param {module:model/AppModelsRequestSkill} body 
     * @param {String} skillId 
     * @param {module:api/SkillsApi~updateApiV1SkillsSkillIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateApiV1SkillsSkillIdPatch(body, skillId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApiV1SkillsSkillIdPatch");
      }
      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling updateApiV1SkillsSkillIdPatch");
      }

      let pathParams = {
        'skill_id': skillId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseSkill;

      return this.apiClient.callApi(
        '/api/v1/skills/{skill_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}