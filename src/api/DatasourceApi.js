/*
 * askaiden
 * The operating system to build AI Tutors
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AppModelsRequestDatasource} from '../model/AppModelsRequestDatasource';
import {AppModelsResponseDatasource} from '../model/AppModelsResponseDatasource';
import {DatasourceList} from '../model/DatasourceList';
import {HTTPValidationError} from '../model/HTTPValidationError';

/**
* Datasource service.
* @module api/DatasourceApi
* @version 0.0.5
*/
export class DatasourceApi {

    /**
    * Constructs a new DatasourceApi. 
    * @alias module:api/DatasourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createDatasources operation.
     * @callback moduleapi/DatasourceApi~createDatasourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseDatasource{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create a new datasource
     * @param {module:model/AppModelsRequestDatasource} body 
     * @param {module:api/DatasourceApi~createDatasourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDatasources(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDatasources");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseDatasource;

      return this.apiClient.callApi(
        '/api/v1/datasources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDatasource operation.
     * @callback moduleapi/DatasourceApi~deleteDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Delete a specific datasource
     * @param {String} datasourceId 
     * @param {module:api/DatasourceApi~deleteDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteDatasource(datasourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'datasourceId' is set
      if (datasourceId === undefined || datasourceId === null) {
        throw new Error("Missing the required parameter 'datasourceId' when calling deleteDatasource");
      }

      let pathParams = {
        'datasource_id': datasourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/datasources/{datasource_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDatasource operation.
     * @callback moduleapi/DatasourceApi~getDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseDatasource{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get a specific datasource
     * @param {String} datasourceId 
     * @param {module:api/DatasourceApi~getDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDatasource(datasourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'datasourceId' is set
      if (datasourceId === undefined || datasourceId === null) {
        throw new Error("Missing the required parameter 'datasourceId' when calling getDatasource");
      }

      let pathParams = {
        'datasource_id': datasourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseDatasource;

      return this.apiClient.callApi(
        '/api/v1/datasources/{datasource_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listDatasources operation.
     * @callback moduleapi/DatasourceApi~listDatasourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasourceList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all datasources
     * @param {module:api/DatasourceApi~listDatasourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listDatasources(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasourceList;

      return this.apiClient.callApi(
        '/api/v1/datasources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDatasource operation.
     * @callback moduleapi/DatasourceApi~updateDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppModelsResponseDatasource{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Update a specific datasource
     * @param {module:model/AppModelsRequestDatasource} body 
     * @param {String} datasourceId 
     * @param {module:api/DatasourceApi~updateDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateDatasource(body, datasourceId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDatasource");
      }
      // verify the required parameter 'datasourceId' is set
      if (datasourceId === undefined || datasourceId === null) {
        throw new Error("Missing the required parameter 'datasourceId' when calling updateDatasource");
      }

      let pathParams = {
        'datasource_id': datasourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppModelsResponseDatasource;

      return this.apiClient.callApi(
        '/api/v1/datasources/{datasource_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}